using EmptyBox.Generation.Proxies.Resolution.Symbols;
using EmptyBox.Generation.Proxies.Resolution.Symbols.Qualification;
using EmptyBox.Generation.Writers.CSharp;

using Microsoft.CodeAnalysis;

using System.Diagnostics.CodeAnalysis;

namespace EmptyBox.Generation.Proxies.Construction.Syntaxes.CSharp.Internal;

internal sealed class TypeInternalProxyBuilder : TypeProxyBuilder
{
    public static TypeInternalProxyBuilder Instance { get; } = new();

    public override string Name => "Internal";

    private TypeInternalProxyBuilder() { }

    [SuppressMessage("Style", "IDE0063:Use simple 'using' statement", Justification = "Требуются чёткие границы блоков")]
    public override void Build(Context context, CSharpWriter writer)
    {
        INamedTypeSymbol targetType = context.Report.Target.Symbol;

        using (var targetTypeDeclarationScope = writer.AppendTypeDeclarationScope(targetType))
        {
            writer.AppendLine("/// <auto-generated/>");
            writer.AppendLine("[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]");
            writer.AppendAccessibility(Accessibility.Internal)
                  .Append(" partial interface ")
                  .Append(targetType.Name)
                  .AppendLine("Proxy");

            using (var proxyScope = writer.AppendScope())
            {
                foreach (MethodProxyAnalyzer.Report methodReport in context.MethodReports)
                {
                    if (methodReport.QualificationReport == null)
                    {
                        MethodInternalProxyBuilder.Instance.Build(new MethodProxyBuilder.Context()
                        {
                            Accessibility = Accessibility.Internal,
                            TargetType = context.Report.Target.Symbol,
                            QualificationReport = context.Report.QualificationReport,
                            Report = methodReport,
                            Symbols = context.Symbols,
                            QualificationContext = null
                        }, writer);
                    }
                    else
                    {
                        foreach (MethodQualificationAnalyzer.SingleQualificationReport qualification in methodReport.QualificationReport.Value.Qualifications)
                        {
                            MethodInternalProxyBuilder.Instance.Build(new MethodProxyBuilder.Context()
                            {
                                Accessibility = Accessibility.Internal,
                                TargetType = context.Report.Target.Symbol,
                                QualificationReport = context.Report.QualificationReport,
                                Report = methodReport,
                                Symbols = context.Symbols,
                                QualificationContext = qualification
                            }, writer);
                        }
                    }

                    writer.AppendLine();
                }
            }
        }
    }
}
