using EmptyBox.Generation.Proxies.Resolution.Symbols;
using EmptyBox.Generation.Proxies.Resolution.Symbols.Qualification;
using EmptyBox.Generation.Writers.CSharp;

using Microsoft.CodeAnalysis;

using System.Diagnostics.CodeAnalysis;

namespace EmptyBox.Generation.Proxies.Construction.Syntaxes.CSharp.External;

internal sealed class TypeExternalProxyBuilder : TypeProxyBuilder
{
    public static TypeExternalProxyBuilder Instance { get; } = new();

    public override string Name => "External";

    private TypeExternalProxyBuilder() { }

    [SuppressMessage("Style", "IDE0063:Use simple 'using' statement", Justification = "Требуются чёткие границы блоков")]
    public override void Build(Context context, CSharpWriter writer)
    {
        INamedTypeSymbol targetType = context.Report.Target.Symbol;

        writer.AppendLine("/// <auto-generated/>");
        writer.AppendAccessibility(targetType.DeclaredAccessibility)
              .AppendLine($" static partial class {targetType.Name}ProxyExtensions");

        using (var proxyScope = writer.AppendScope())
        {
            foreach (MethodProxyAnalyzer.Report methodReport in context.MethodReports)
            {
                if (methodReport.QualificationReport == null)
                {
                    MethodExternalProxyBuilder.Instance.Build(new MethodProxyBuilder.Context()
                    {
                        Accessibility = Accessibility.Public,
                        TargetType = context.Report.Target.Symbol,
                        QualificationReport = context.Report.QualificationReport,
                        Report = methodReport,
                        Symbols = context.Symbols,
                        QualificationContext = null
                    }, writer);
                }
                else
                {
                    foreach (MethodQualificationAnalyzer.SingleQualificationReport qualification in methodReport.QualificationReport.Value.Qualifications)
                    {
                        MethodProxyBuilder.Context methodContext = new()
                        {
                            Accessibility = Accessibility.Public,
                            TargetType = context.Report.Target.Symbol,
                            QualificationReport = context.Report.QualificationReport,
                            Report = methodReport,
                            Symbols = context.Symbols,
                            QualificationContext = qualification
                        };

                        MethodExternalProxyBuilder.Instance.Build(methodContext, writer);
                    }
                }

                writer.AppendLine();
            }
        }
    }
}
